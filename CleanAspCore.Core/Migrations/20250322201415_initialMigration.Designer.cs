// <auto-generated />
using System;
using CleanAspCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanAspCore.Core.Migrations
{
    [DbContext(typeof(HrContext))]
    [Migration("20250322201415_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanAspCore.Core.Data.Models.Departments.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CleanAspCore.Core.Data.Models.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CleanAspCore.Core.Data.Models.Jobs.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("CleanAspCore.Core.Data.Models.Weapons.Weapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Weapons");

                    b.HasDiscriminator<string>("Type").HasValue("Weapon");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CleanAspCore.Core.Data.Models.Weapons.Bow", b =>
                {
                    b.HasBaseType("CleanAspCore.Core.Data.Models.Weapons.Weapon");

                    b.Property<float>("Damage")
                        .HasColumnType("real");

                    b.Property<float>("Range")
                        .HasColumnType("real");

                    b.Property<float>("RateOfFire")
                        .HasColumnType("real");

                    b.ToTable("Weapons", t =>
                        {
                            t.Property("Damage")
                                .HasColumnName("Bow_Damage");

                            t.Property("RateOfFire")
                                .HasColumnName("Bow_RateOfFire");
                        });

                    b.HasDiscriminator().HasValue("bow");
                });

            modelBuilder.Entity("CleanAspCore.Core.Data.Models.Weapons.Sword", b =>
                {
                    b.HasBaseType("CleanAspCore.Core.Data.Models.Weapons.Weapon");

                    b.Property<float>("Damage")
                        .HasColumnType("real");

                    b.Property<float>("RateOfFire")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("sword");
                });

            modelBuilder.Entity("CleanAspCore.Core.Data.Models.Employees.Employee", b =>
                {
                    b.HasOne("CleanAspCore.Core.Data.Models.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanAspCore.Core.Data.Models.Jobs.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Job");
                });
#pragma warning restore 612, 618
        }
    }
}
