# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

permissions:
  checks: write
  pull-requests: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
      - name: Cache nuget packages
        id: cache-nuget
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            **/obj/*
          key: ${{ runner.os }}-nuget_obj-${{ hashFiles('**/*.csproj', 'global.json', 'Directory.Build.props', 'Directory.Packages.props') }}
      - name: Restore dependencies
        if: steps.cache-nuget.outputs.cache-hit != 'true'
        run: dotnet restore
      - name: Check code formatting
        run: dotnet format --no-restore --verify-no-changes -v diag
      - name: Build
        run: dotnet build
          --no-restore
          --configuration Release
      - name: Test
        working-directory: Tests/CleanAspCore.Api.Tests
        run: >
          dotnet run
          --no-build
          --configuration Release
          --coverage
          --coverage-output-format cobertura
          --report-trx
      - uses: actions/upload-artifact@v4  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results
          path: '**/*.trx'
      #- uses: dorny/test-reporter@v1
      #  if: always()
      #  with:
      #    artifact: test-results            # artifact name
      #    name: Tests                  # Name of the check run which will be created
      #    path: '**/*.trx'                     # Path to test results (inside artifact .zip)
      #    reporter: dotnet-trx              # Format of test results
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "**/*.cobertura.xml"
          badge: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
